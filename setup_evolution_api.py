#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para configurar Evolution API como alternativa para envio de m√≠dia
"""

import subprocess
import requests
import time
import json
import os

# Configura√ß√µes da Evolution API
EVOLUTION_PORT = 8080
EVOLUTION_URL = f"http://localhost:{EVOLUTION_PORT}"
API_KEY = "evolution-api-key-2025"
INSTANCE_NAME = "whatsapp-sender"

def check_docker():
    """Verifica se o Docker est√° instalado e rodando"""
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Docker encontrado: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Docker n√£o encontrado")
            return False
    except FileNotFoundError:
        print("‚ùå Docker n√£o est√° instalado")
        return False

def stop_existing_evolution():
    """Para container Evolution API existente se houver"""
    try:
        print("üîÑ Verificando containers Evolution API existentes...")
        result = subprocess.run(['docker', 'ps', '-a', '--filter', 'name=evolution-api', '--format', '{{.Names}}'], 
                              capture_output=True, text=True)
        
        if result.stdout.strip():
            print("üõë Parando container Evolution API existente...")
            subprocess.run(['docker', 'stop', 'evolution-api'], capture_output=True)
            subprocess.run(['docker', 'rm', 'evolution-api'], capture_output=True)
            print("‚úÖ Container anterior removido")
        else:
            print("‚ÑπÔ∏è Nenhum container Evolution API encontrado")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao verificar containers: {e}")

def start_evolution_api():
    """Inicia o container da Evolution API"""
    print("üöÄ Iniciando Evolution API...")
    
    docker_cmd = [
        'docker', 'run', '-d',
        '--name', 'evolution-api',
        '-p', f'{EVOLUTION_PORT}:8080',
        '-e', f'AUTHENTICATION_API_KEY={API_KEY}',
        '-e', 'AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true',
        '-e', 'QRCODE_LIMIT=30',
        '-e', 'WEBSOCKET_ENABLED=false',
        '-e', 'DATABASE_ENABLED=false',
        '-e', 'DATABASE_PROVIDER=',
        '-e', 'CACHE_REDIS_ENABLED=false',
        '-e', 'CACHE_LOCAL_ENABLED=true',
        'atendai/evolution-api:latest'
    ]
    
    try:
        result = subprocess.run(docker_cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Evolution API iniciada com sucesso!")
            print(f"üì± Container ID: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå Erro ao iniciar Evolution API: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao executar Docker: {e}")
        return False

def wait_for_api():
    """Aguarda a API ficar dispon√≠vel"""
    print("‚è≥ Aguardando Evolution API ficar dispon√≠vel...")
    
    for i in range(30):  # Tenta por 30 segundos
        try:
            response = requests.get(f"{EVOLUTION_URL}/manager/instances", 
                                  headers={'apikey': API_KEY},
                                  timeout=5)
            if response.status_code == 200:
                print("‚úÖ Evolution API est√° respondendo!")
                return True
        except requests.exceptions.RequestException:
            pass
        
        print(f"‚è≥ Tentativa {i+1}/30...")
        time.sleep(1)
    
    print("‚ùå Evolution API n√£o respondeu no tempo esperado")
    return False

def create_instance():
    """Cria uma inst√¢ncia WhatsApp na Evolution API"""
    print(f"üì± Criando inst√¢ncia '{INSTANCE_NAME}'...")
    
    data = {
        "instanceName": INSTANCE_NAME,
        "qrcode": True,
        "integration": "WHATSAPP-BAILEYS"
    }
    
    try:
        response = requests.post(
            f"{EVOLUTION_URL}/manager/instances",
            json=data,
            headers={
                'Content-Type': 'application/json',
                'apikey': API_KEY
            }
        )
        
        if response.status_code == 201:
            result = response.json()
            print("‚úÖ Inst√¢ncia criada com sucesso!")
            print(f"üìã Detalhes: {json.dumps(result, indent=2)}")
            return True
        else:
            print(f"‚ùå Erro ao criar inst√¢ncia: {response.status_code}")
            print(f"üìÑ Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def get_qr_code():
    """Obt√©m o QR Code para conectar o WhatsApp"""
    print("üì± Obtendo QR Code...")
    
    try:
        response = requests.get(
            f"{EVOLUTION_URL}/instance/connect/{INSTANCE_NAME}",
            headers={'apikey': API_KEY}
        )
        
        if response.status_code == 200:
            result = response.json()
            if 'base64' in result:
                # Salva o QR Code como imagem
                import base64
                qr_data = result['base64'].split(',')[1]  # Remove o prefixo data:image/png;base64,
                
                with open('evolution_qr_code.png', 'wb') as f:
                    f.write(base64.b64decode(qr_data))
                
                print("‚úÖ QR Code salvo como 'evolution_qr_code.png'")
                print("üì± Escaneie o QR Code com seu WhatsApp para conectar!")
                return True
            else:
                print("‚ùå QR Code n√£o encontrado na resposta")
                return False
        else:
            print(f"‚ùå Erro ao obter QR Code: {response.status_code}")
            print(f"üìÑ Resposta: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return False

def check_instance_status():
    """Verifica o status da inst√¢ncia"""
    try:
        response = requests.get(
            f"{EVOLUTION_URL}/instance/connectionState/{INSTANCE_NAME}",
            headers={'apikey': API_KEY}
        )
        
        if response.status_code == 200:
            result = response.json()
            status = result.get('instance', {}).get('state', 'unknown')
            print(f"üì± Status da inst√¢ncia: {status}")
            return status
        else:
            print(f"‚ùå Erro ao verificar status: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro na requisi√ß√£o: {e}")
        return None

def create_test_script():
    """Cria script de teste para Evolution API"""
    test_script = '''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de teste para Evolution API - Envio de M√≠dia
"""

import requests
import json

# Configura√ß√µes
EVOLUTION_URL = "http://localhost:8080"
API_KEY = "evolution-api-key-2025"
INSTANCE_NAME = "whatsapp-sender"
TEST_PHONE = "5547996083460"  # Substitua pelo seu n√∫mero

def check_connection():
    """Verifica se a inst√¢ncia est√° conectada"""
    try:
        response = requests.get(
            f"{EVOLUTION_URL}/instance/connectionState/{INSTANCE_NAME}",
            headers={'apikey': API_KEY}
        )
        
        if response.status_code == 200:
            result = response.json()
            status = result.get('instance', {}).get('state', 'unknown')
            print(f"üì± Status: {status}")
            return status == 'open'
        return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def send_text_message():
    """Testa envio de mensagem de texto"""
    print("\nüìù Testando envio de texto...")
    
    data = {
        "number": TEST_PHONE,
        "text": "ü§ñ Teste Evolution API\\n\\nSe voc√™ recebeu esta mensagem, a Evolution API est√° funcionando!"
    }
    
    try:
        response = requests.post(
            f"{EVOLUTION_URL}/message/sendText/{INSTANCE_NAME}",
            json=data,
            headers={
                'Content-Type': 'application/json',
                'apikey': API_KEY
            }
        )
        
        if response.status_code == 201:
            print("‚úÖ Texto enviado com sucesso!")
            return True
        else:
            print(f"‚ùå Erro: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def send_image():
    """Testa envio de imagem"""
    print("\nüñºÔ∏è Testando envio de imagem...")
    
    data = {
        "number": TEST_PHONE,
        "mediaMessage": {
            "mediatype": "image",
            "media": "https://github.com/devlikeapro/waha/raw/core/examples/dev.likeapro.jpg",
            "caption": "üñºÔ∏è Teste de imagem via Evolution API\\n\\nSe voc√™ recebeu esta imagem, o envio de m√≠dia est√° funcionando!"
        }
    }
    
    try:
        response = requests.post(
            f"{EVOLUTION_URL}/message/sendMedia/{INSTANCE_NAME}",
            json=data,
            headers={
                'Content-Type': 'application/json',
                'apikey': API_KEY
            }
        )
        
        if response.status_code == 201:
            print("‚úÖ Imagem enviada com sucesso!")
            return True
        else:
            print(f"‚ùå Erro: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def send_video():
    """Testa envio de v√≠deo"""
    print("\nüé• Testando envio de v√≠deo...")
    
    data = {
        "number": TEST_PHONE,
        "mediaMessage": {
            "mediatype": "video",
            "media": "https://github.com/devlikeapro/waha/raw/core/examples/video.mp4",
            "caption": "üé• Teste de v√≠deo via Evolution API\\n\\nSe voc√™ recebeu este v√≠deo, o envio de m√≠dia est√° funcionando perfeitamente!"
        }
    }
    
    try:
        response = requests.post(
            f"{EVOLUTION_URL}/message/sendMedia/{INSTANCE_NAME}",
            json=data,
            headers={
                'Content-Type': 'application/json',
                'apikey': API_KEY
            }
        )
        
        if response.status_code == 201:
            print("‚úÖ V√≠deo enviado com sucesso!")
            return True
        else:
            print(f"‚ùå Erro: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        return False

def main():
    print("üöÄ Testando Evolution API")
    print("="*40)
    
    if not check_connection():
        print("‚ùå Inst√¢ncia n√£o est√° conectada. Execute o setup primeiro.")
        return
    
    print("‚úÖ Inst√¢ncia conectada! Iniciando testes...")
    
    # Testes
    send_text_message()
    time.sleep(2)
    
    send_image()
    time.sleep(2)
    
    send_video()
    
    print("\nüéâ Testes conclu√≠dos!")

if __name__ == "__main__":
    import time
    main()
'''
    
    with open('test_evolution_api.py', 'w', encoding='utf-8') as f:
        f.write(test_script)
    
    print("‚úÖ Script de teste criado: 'test_evolution_api.py'")

def main():
    print("üöÄ Configurando Evolution API para envio de m√≠dia")
    print("="*60)
    
    # Verifica Docker
    if not check_docker():
        print("\n‚ùå Docker √© necess√°rio para continuar.")
        print("üì• Instale o Docker em: https://www.docker.com/get-started")
        return
    
    # Para container existente
    stop_existing_evolution()
    
    # Inicia Evolution API
    if not start_evolution_api():
        return
    
    # Aguarda API ficar dispon√≠vel
    if not wait_for_api():
        return
    
    # Cria inst√¢ncia
    if not create_instance():
        return
    
    # Aguarda um pouco para a inst√¢ncia inicializar
    print("‚è≥ Aguardando inst√¢ncia inicializar...")
    time.sleep(5)
    
    # Obt√©m QR Code
    if get_qr_code():
        print("\n" + "="*60)
        print("‚úÖ EVOLUTION API CONFIGURADA COM SUCESSO!")
        print("\nüìã Informa√ß√µes importantes:")
        print(f"üåê URL da API: {EVOLUTION_URL}")
        print(f"üîë API Key: {API_KEY}")
        print(f"üì± Nome da Inst√¢ncia: {INSTANCE_NAME}")
        print(f"üñºÔ∏è QR Code salvo em: evolution_qr_code.png")
        
        print("\nüì± PR√ìXIMOS PASSOS:")
        print("1. Abra o arquivo 'evolution_qr_code.png'")
        print("2. Escaneie o QR Code com seu WhatsApp")
        print("3. Aguarde a conex√£o ser estabelecida")
        print("4. Execute 'python3 test_evolution_api.py' para testar")
        
        # Cria script de teste
        create_test_script()
        
        print("\nüîß COMANDOS √öTEIS:")
        print(f"üìä Verificar status: curl -H 'apikey: {API_KEY}' {EVOLUTION_URL}/instance/connectionState/{INSTANCE_NAME}")
        print(f"üõë Parar container: docker stop evolution-api")
        print(f"üöÄ Iniciar container: docker start evolution-api")
        
    else:
        print("‚ùå Falha ao obter QR Code")

if __name__ == "__main__":
    main()