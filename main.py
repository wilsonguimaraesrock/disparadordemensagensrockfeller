#!/usr/bin/env python3
"""
WhatsApp API Sender - Main Module
Sistema de envio em massa de mensagens via WhatsApp usando APIs alternativas
"""

import os
import sys
import logging
from pathlib import Path
from datetime import datetime

from utils import (
    load_config,
    setup_logging,
    load_contacts_from_excel,
    validate_phone_number,
    wait_random_interval
)
from api_sender import WhatsAppAPISender


def main():
    """Fun√ß√£o principal que coordena o envio de mensagens em massa"""
    
    # Configurar logging
    setup_logging()
    logger = logging.getLogger(__name__)
    
    print("üöÄ WhatsApp API Sender - Envio em Massa de Mensagens")
    print("=" * 60)
    
    try:
        # Carregar configura√ß√µes
        config = load_config()
        logger.info("Configura√ß√µes carregadas com sucesso")
        
        # Solicitar caminho da planilha
        excel_path = input("\nüìã Digite o caminho da planilha Excel (.xlsx): ").strip()
        
        if not excel_path:
            print("‚ùå Caminho da planilha n√£o pode estar vazio!")
            return
        
        if not os.path.exists(excel_path):
            print(f"‚ùå Arquivo n√£o encontrado: {excel_path}")
            return
        
        # Carregar contatos da planilha
        print("\nüìñ Carregando contatos da planilha...")
        contacts = load_contacts_from_excel(excel_path)
        
        if not contacts:
            print("‚ùå Nenhum contato v√°lido encontrado na planilha!")
            return
        
        print(f"‚úÖ {len(contacts)} contatos carregados")
        
        # Validar n√∫meros de telefone
        print("\nüîç Validando n√∫meros de telefone...")
        valid_contacts = []
        invalid_count = 0
        
        for contact in contacts:
            if validate_phone_number(contact['numero']):
                valid_contacts.append(contact)
            else:
                invalid_count += 1
                logger.warning(f"N√∫mero inv√°lido: {contact['numero']}")
        
        if invalid_count > 0:
            print(f"‚ö†Ô∏è  {invalid_count} n√∫meros inv√°lidos foram ignorados")
        
        print(f"‚úÖ {len(valid_contacts)} n√∫meros v√°lidos para envio")
        
        if not valid_contacts:
            print("‚ùå Nenhum n√∫mero v√°lido para envio!")
            return
        
        # Confirmar envio
        print(f"\nüì± Voc√™ est√° prestes a enviar {len(valid_contacts)} mensagens")
        confirm = input("Deseja continuar? (s/n): ").strip().lower()
        
        if confirm not in ['s', 'sim', 'y', 'yes']:
            print("‚ùå Envio cancelado pelo usu√°rio")
            return
        
        # Inicializar sender
        sender = WhatsAppAPISender(config)
        
        # Estat√≠sticas
        success_count = 0
        error_count = 0
        
        print(f"\nüöÄ Iniciando envio de {len(valid_contacts)} mensagens...")
        print("=" * 60)
        
        # Enviar mensagens
        for i, contact in enumerate(valid_contacts, 1):
            numero = contact['numero']
            nome = contact.get('nome', 'Contato')
            mensagem = contact.get('mensagem', '')
            caminho_midia = contact.get('caminho_midia', '')
            
            print(f"\n[{i}/{len(valid_contacts)}] Enviando para {nome} ({numero})")
            
            try:
                # Verificar se arquivo de m√≠dia existe (se especificado)
                if caminho_midia and not os.path.exists(caminho_midia):
                    logger.error(f"Arquivo de m√≠dia n√£o encontrado: {caminho_midia}")
                    sender.log_result(numero, 'erro', 'Arquivo de m√≠dia n√£o encontrado')
                    error_count += 1
                    continue
                
                # Enviar mensagem
                success = sender.send_message(
                    numero=numero,
                    mensagem=mensagem,
                    caminho_midia=caminho_midia
                )
                
                if success:
                    print(f"‚úÖ Mensagem enviada com sucesso!")
                    success_count += 1
                else:
                    print(f"‚ùå Falha no envio da mensagem")
                    error_count += 1
                
            except Exception as e:
                logger.error(f"Erro no envio para {numero}: {str(e)}")
                sender.log_result(numero, 'erro', str(e))
                print(f"‚ùå Erro: {str(e)}")
                error_count += 1
            
            # Aguardar intervalo aleat√≥rio (exceto na √∫ltima mensagem)
            if i < len(valid_contacts):
                wait_time = wait_random_interval()
                print(f"‚è≥ Aguardando {wait_time} segundos...")
        
        # Resumo final
        print("\n" + "=" * 60)
        print("üìä RESUMO FINAL")
        print("=" * 60)
        print(f"‚úÖ Mensagens enviadas com sucesso: {success_count}")
        print(f"‚ùå Mensagens com erro: {error_count}")
        print(f"üìã Total processado: {len(valid_contacts)}")
        
        if success_count > 0:
            success_rate = (success_count / len(valid_contacts)) * 100
            print(f"üìà Taxa de sucesso: {success_rate:.1f}%")
        
        log_file = sender.get_log_filename()
        print(f"üìÑ Log salvo em: {log_file}")
        
        logger.info(f"Envio conclu√≠do: {success_count} sucessos, {error_count} erros")
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Envio interrompido pelo usu√°rio")
        logger.info("Envio interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {str(e)}")
        logger.error(f"Erro fatal: {str(e)}")
        sys.exit(1)


if __name__ == "__main__":
    main() 