#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Setup Evolution API - Vers√£o Standalone (sem Docker)
Configurador autom√°tico para Evolution API local
"""

import os
import sys
import json
import time
import subprocess
import requests
from pathlib import Path


class EvolutionAPISetup:
    def __init__(self):
        self.config = {
            'base_url': 'http://localhost:8080',
            'api_key': 'evolution-api-key-2025',
            'instance_name': 'whatsapp-sender-v2'
        }
        self.evolution_path = Path('evolution-api')
    
    def verificar_node(self):
        """Verifica se Node.js est√° instalado"""
        try:
            result = subprocess.run(['node', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.strip()
                print(f"‚úÖ Node.js encontrado: {version}")
                return True
            else:
                print("‚ùå Node.js n√£o encontrado")
                return False
        except FileNotFoundError:
            print("‚ùå Node.js n√£o instalado")
            return False
    
    def verificar_npm(self):
        """Verifica se npm est√° instalado"""
        try:
            result = subprocess.run(['npm', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.strip()
                print(f"‚úÖ npm encontrado: {version}")
                return True
            else:
                print("‚ùå npm n√£o encontrado")
                return False
        except FileNotFoundError:
            print("‚ùå npm n√£o instalado")
            return False
    
    def verificar_git(self):
        """Verifica se Git est√° instalado"""
        try:
            result = subprocess.run(['git', '--version'], 
                                  capture_output=True, text=True)
            if result.returncode == 0:
                version = result.stdout.strip()
                print(f"‚úÖ Git encontrado: {version}")
                return True
            else:
                print("‚ùå Git n√£o encontrado")
                return False
        except FileNotFoundError:
            print("‚ùå Git n√£o instalado")
            return False
    
    def clonar_evolution_api(self):
        """Clona reposit√≥rio da Evolution API"""
        if self.evolution_path.exists():
            print(f"üìÅ Diret√≥rio {self.evolution_path} j√° existe")
            return True
        
        print("üì• Clonando Evolution API...")
        try:
            result = subprocess.run([
                'git', 'clone', 
                'https://github.com/EvolutionAPI/evolution-api.git',
                str(self.evolution_path)
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Evolution API clonada com sucesso!")
                return True
            else:
                print(f"‚ùå Erro ao clonar: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
    
    def instalar_dependencias(self):
        """Instala depend√™ncias do Evolution API"""
        print("üì¶ Instalando depend√™ncias...")
        try:
            os.chdir(self.evolution_path)
            
            result = subprocess.run(['npm', 'install'], 
                                  capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ Depend√™ncias instaladas!")
                return True
            else:
                print(f"‚ùå Erro na instala√ß√£o: {result.stderr}")
                return False
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
        finally:
            os.chdir('..')
    
    def criar_env_file(self):
        """Cria arquivo .env para Evolution API"""
        env_content = f"""# Evolution API Configuration
AUTHENTICATION_API_KEY={self.config['api_key']}
AUTHENTICATION_EXPOSE_IN_FETCH_INSTANCES=true

# Server Configuration
SERVER_PORT=8080
SERVER_URL=http://localhost:8080

# Database (opcional - usar SQLite para simplicidade)
DATABASE_ENABLED=true
DATABASE_PROVIDER=sqlite
DATABASE_CONNECTION_URI=file:./evolution.db

# Cache (opcional)
CACHE_LOCAL_ENABLED=true
CACHE_REDIS_ENABLED=false

# Logs
LOG_LEVEL=info
LOG_COLOR=true

# QR Code
QRCODE_LIMIT=30

# WebSocket (opcional)
WEBSOCKET_ENABLED=false

# Webhook (opcional)
WEBHOOK_GLOBAL_ENABLED=false
"""
        
        env_path = self.evolution_path / '.env'
        try:
            with open(env_path, 'w', encoding='utf-8') as f:
                f.write(env_content)
            print(f"‚úÖ Arquivo .env criado: {env_path}")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar .env: {e}")
            return False
    
    def iniciar_evolution_api(self):
        """Inicia Evolution API"""
        print("üöÄ Iniciando Evolution API...")
        try:
            os.chdir(self.evolution_path)
            
            # Usar npm start
            print("üì° Executando: npm start")
            print("üí° DICA: Para parar, pressione Ctrl+C")
            print("üí° ACESSO: http://localhost:8080")
            print("-" * 50)
            
            subprocess.run(['npm', 'start'], check=True)
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è  Evolution API interrompida pelo usu√°rio")
        except Exception as e:
            print(f"‚ùå Erro ao iniciar: {e}")
        finally:
            os.chdir('..')
    
    def verificar_api_rodando(self):
        """Verifica se a API est√° rodando"""
        try:
            response = requests.get(f"{self.config['base_url']}/", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ Evolution API est√° rodando em {self.config['base_url']}")
                return True
            else:
                print(f"‚ö†Ô∏è  API respondeu com status {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print(f"‚ùå N√£o foi poss√≠vel conectar em {self.config['base_url']}")
            return False
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
    
    def criar_instancia(self):
        """Cria inst√¢ncia do WhatsApp"""
        if not self.verificar_api_rodando():
            print("‚ùå API n√£o est√° rodando. Inicie primeiro com: python setup_evolution_standalone.py --start")
            return False
        
        print(f"üì± Criando inst√¢ncia: {self.config['instance_name']}")
        
        url = f"{self.config['base_url']}/instance/create"
        headers = {'apikey': self.config['api_key']}
        payload = {
            "instanceName": self.config['instance_name'],
            "token": self.config['api_key'],
            "qrcode": True,
            "integration": "WHATSAPP-BAILEYS"
        }
        
        try:
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            
            if response.status_code in [200, 201]:
                result = response.json()
                print("‚úÖ Inst√¢ncia criada com sucesso!")
                print(f"üìã Detalhes: {result}")
                return True
            else:
                print(f"‚ùå Erro HTTP {response.status_code}")
                print(f"üìã Resposta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
    
    def conectar_instancia(self):
        """Conecta inst√¢ncia do WhatsApp"""
        if not self.verificar_api_rodando():
            print("‚ùå API n√£o est√° rodando")
            return False
        
        print(f"üîó Conectando inst√¢ncia: {self.config['instance_name']}")
        
        url = f"{self.config['base_url']}/instance/connect/{self.config['instance_name']}"
        headers = {'apikey': self.config['api_key']}
        
        try:
            response = requests.get(url, headers=headers, timeout=30)
            
            if response.status_code == 200:
                result = response.json()
                print("‚úÖ Comando de conex√£o enviado!")
                
                if 'qrcode' in result:
                    print("üì± QR Code gerado!")
                    print("üîó Para ver QR Code, acesse:")
                    print(f"   {self.config['base_url']}/instance/qrcode/{self.config['instance_name']}")
                    print("\nüí° INSTRU√á√ïES:")
                    print("1. Abra WhatsApp no seu celular")
                    print("2. V√° em Configura√ß√µes > Aparelhos conectados")
                    print("3. Toque em 'Conectar um aparelho'")
                    print("4. Escaneie o QR Code")
                
                return True
            else:
                print(f"‚ùå Erro HTTP {response.status_code}")
                print(f"üìã Resposta: {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
    
    def atualizar_config_json(self):
        """Atualiza config.json para usar Evolution API"""
        config_path = Path('config.json')
        
        config_data = {
            "provider": "evolution-api",
            "base_url": self.config['base_url'],
            "instance_id": self.config['instance_name'],
            "token": self.config['api_key'],
            "timeout": "60",
            "min_interval_seconds": "5",
            "max_interval_seconds": "20"
        }
        
        try:
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(config_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Arquivo {config_path} atualizado!")
            print("üìã Configura√ß√£o:")
            for key, value in config_data.items():
                print(f"   {key}: {value}")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro ao atualizar config.json: {e}")
            return False
    
    def mostrar_instrucoes_instalacao(self):
        """Mostra instru√ß√µes de instala√ß√£o de depend√™ncias"""
        print("üîß INSTALA√á√ÉO DE DEPEND√äNCIAS NECESS√ÅRIAS")
        print("=" * 50)
        
        if not self.verificar_node():
            print("\nüì• INSTALAR NODE.JS:")
            print("   macOS: brew install node")
            print("   Ubuntu: sudo apt install nodejs npm")
            print("   Windows: Baixar de https://nodejs.org")
        
        if not self.verificar_git():
            print("\nüì• INSTALAR GIT:")
            print("   macOS: brew install git")
            print("   Ubuntu: sudo apt install git")
            print("   Windows: Baixar de https://git-scm.com")
        
        print("\nüîÑ Depois de instalar, execute novamente:")
        print("   python setup_evolution_standalone.py --setup")


def main():
    setup = EvolutionAPISetup()
    
    if len(sys.argv) > 1:
        comando = sys.argv[1]
        
        if comando == '--check':
            print("üîç Verificando depend√™ncias...")
            setup.verificar_node()
            setup.verificar_npm()
            setup.verificar_git()
            
        elif comando == '--setup':
            print("üöÄ CONFIGURA√á√ÉO COMPLETA DA EVOLUTION API")
            print("=" * 50)
            
            # Verificar depend√™ncias
            if not setup.verificar_node() or not setup.verificar_npm() or not setup.verificar_git():
                setup.mostrar_instrucoes_instalacao()
                return
            
            # Setup completo
            steps = [
                ("Clonar Evolution API", setup.clonar_evolution_api),
                ("Instalar depend√™ncias", setup.instalar_dependencias),
                ("Criar arquivo .env", setup.criar_env_file),
                ("Atualizar config.json", setup.atualizar_config_json)
            ]
            
            for step_name, step_func in steps:
                print(f"\nüîÑ {step_name}...")
                if not step_func():
                    print(f"‚ùå Falha em: {step_name}")
                    return
            
            print("\nüéâ SETUP CONCLU√çDO!")
            print("üìã PR√ìXIMOS PASSOS:")
            print("1. python setup_evolution_standalone.py --start")
            print("2. python setup_evolution_standalone.py --create-instance")
            print("3. python setup_evolution_standalone.py --connect")
            
        elif comando == '--start':
            setup.iniciar_evolution_api()
            
        elif comando == '--create-instance':
            setup.criar_instancia()
            
        elif comando == '--connect':
            setup.conectar_instancia()
            
        elif comando == '--status':
            setup.verificar_api_rodando()
            
        else:
            print("‚ùå Comando inv√°lido!")
            print("Comandos dispon√≠veis:")
            print("  --check          : Verificar depend√™ncias")
            print("  --setup          : Setup completo")
            print("  --start          : Iniciar Evolution API")
            print("  --create-instance: Criar inst√¢ncia WhatsApp")
            print("  --connect        : Conectar inst√¢ncia")
            print("  --status         : Verificar se API est√° rodando")
    
    else:
        print("üöÄ EVOLUTION API SETUP - Vers√£o Standalone")
        print("=" * 50)
        print("Este script configura Evolution API sem Docker")
        print("")
        print("üìã COMANDOS:")
        print("  python setup_evolution_standalone.py --check")
        print("  python setup_evolution_standalone.py --setup")
        print("  python setup_evolution_standalone.py --start")
        print("  python setup_evolution_standalone.py --create-instance")
        print("  python setup_evolution_standalone.py --connect")
        print("  python setup_evolution_standalone.py --status")
        print("")
        print("üí° Para come√ßar, execute:")
        print("   python setup_evolution_standalone.py --check")


if __name__ == "__main__":
    main()