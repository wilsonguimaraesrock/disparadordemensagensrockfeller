"""
WhatsApp API Sender - API Communication Module
M√≥dulo respons√°vel pela comunica√ß√£o com APIs alternativas de WhatsApp
"""

import os
import requests
import logging
import csv
import mimetypes
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any


class WhatsAppAPISender:
    """
    Classe respons√°vel pelo envio de mensagens via APIs alternativas de WhatsApp
    Suporta diferentes provedores: WAHA, Chat-API, Z-API, UltraMsg, etc.
    """
    
    def __init__(self, config: Dict[str, Any]):
        """
        Inicializa o sender com as configura√ß√µes da API
        
        Args:
            config: Dicion√°rio com configura√ß√µes da API
        """
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.session = requests.Session()
        self.log_filename = f"log_envios_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        # Configurar headers da sess√£o
        self._setup_session()
        
        # Inicializar arquivo de log
        self._init_log_file()
        
        self.logger.info(f"WhatsApp API Sender inicializado com provider: {config.get('provider', 'unknown')}")
    
    def _setup_session(self):
        """Configura a sess√£o HTTP com headers padr√£o"""
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'WhatsApp-API-Sender/1.0'
        }
        
        # Adicionar token de autentica√ß√£o conforme o provider
        provider = self.config.get('provider', '').lower()
        token = self.config.get('token', '')
        
        if provider == 'waha':
            headers['X-API-KEY'] = token
        elif provider == 'chat-api':
            headers['Authorization'] = f'Bearer {token}'
        elif provider in ['z-api', 'ultramsg']:
            # Alguns providers usam token na URL ou em headers espec√≠ficos
            if token:
                headers['X-API-KEY'] = token
        elif provider == 'evolution-api':
            headers['apikey'] = token
        
        self.session.headers.update(headers)
        self.session.timeout = self.config.get('timeout', 30)
    
    def _init_log_file(self):
        """Inicializa o arquivo de log CSV"""
        try:
            with open(self.log_filename, 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow(['timestamp', 'numero', 'status', 'detalhes', 'provider'])
            self.logger.info(f"Arquivo de log criado: {self.log_filename}")
        except Exception as e:
            self.logger.error(f"Erro ao criar arquivo de log: {e}")
    
    def log_result(self, numero: str, status: str, detalhes: str = ''):
        """
        Registra o resultado de um envio no log
        
        Args:
            numero: N√∫mero de telefone
            status: Status do envio (sucesso, erro, etc.)
            detalhes: Detalhes adicionais
        """
        try:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            provider = self.config.get('provider', 'unknown')
            
            with open(self.log_filename, 'a', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow([timestamp, numero, status, detalhes, provider])
        except Exception as e:
            self.logger.error(f"Erro ao escrever no log: {e}")
    
    def send_message(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """
        Envia uma mensagem via API do WhatsApp
        
        Args:
            numero: N√∫mero de telefone com DDI (ex: +5521999998888)
            mensagem: Texto da mensagem
            caminho_midia: Caminho para arquivo de m√≠dia (opcional)
            
        Returns:
            bool: True se enviado com sucesso, False caso contr√°rio
        """
        try:
            provider = self.config.get('provider', '').lower()
            
            # Determinar m√©todo de envio baseado no provider
            if provider == 'waha':
                return self._send_via_waha(numero, mensagem, caminho_midia)
            elif provider == 'chat-api':
                return self._send_via_chat_api(numero, mensagem, caminho_midia)
            elif provider == 'z-api':
                return self._send_via_z_api(numero, mensagem, caminho_midia)
            elif provider == 'ultramsg':
                return self._send_via_ultramsg(numero, mensagem, caminho_midia)
            elif provider == 'evolution-api':
                return self._send_via_evolution_api(numero, mensagem, caminho_midia)
            else:
                # Provider gen√©rico - tenta usar estrutura padr√£o
                return self._send_generic(numero, mensagem, caminho_midia)
                
        except Exception as e:
            self.logger.error(f"Erro no envio para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_via_waha(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """Envia mensagem via API WAHA"""
        base_url = self.config.get('base_url', '')
        instance_id = self.config.get('instance_id', '')
        
        print(f"üîç [WAHA DEBUG] Iniciando envio para {numero}")
        print(f"üîç [WAHA DEBUG] Base URL: {base_url}")
        print(f"üîç [WAHA DEBUG] Instance ID: {instance_id}")
        print(f"üîç [WAHA DEBUG] Mensagem: {mensagem[:50]}...")
        print(f"üîç [WAHA DEBUG] M√≠dia: {caminho_midia if caminho_midia else 'Nenhuma'}")
        
        # Limpar n√∫mero (remover caracteres especiais)
        numero_limpo = numero.replace('+', '').replace('-', '').replace(' ', '')
        print(f"üîç [WAHA DEBUG] N√∫mero limpo: {numero_limpo}")
        
        try:
            if caminho_midia and os.path.exists(caminho_midia):
                print(f"üîç [WAHA DEBUG] Enviando m√≠dia: {caminho_midia}")
                # Enviar m√≠dia com caption
                return self._send_media_waha(numero_limpo, mensagem, caminho_midia, base_url, instance_id)
            else:
                print(f"üîç [WAHA DEBUG] Enviando texto simples")
                # Enviar apenas texto
                url = f"{base_url}/api/sendText"
                print(f"üîç [WAHA DEBUG] URL completa: {url}")
                
                payload = {
                    "chatId": f"{numero_limpo}@c.us",
                    "text": mensagem,
                    "session": instance_id
                }
                print(f"üîç [WAHA DEBUG] Payload: {payload}")
                
                print(f"üîç [WAHA DEBUG] Fazendo requisi√ß√£o POST...")
                response = self.session.post(url, json=payload)
                print(f"üîç [WAHA DEBUG] Status Code: {response.status_code}")
                print(f"üîç [WAHA DEBUG] Response Headers: {dict(response.headers)}")
                
                try:
                    response_text = response.text
                    print(f"üîç [WAHA DEBUG] Response Text: {response_text}")
                except:
                    print(f"üîç [WAHA DEBUG] Erro ao ler response text")
                
                if response.status_code in [200, 201]:  # 200 OK ou 201 Created
                    try:
                        result = response.json()
                        print(f"üîç [WAHA DEBUG] Response JSON: {result}")
                        # Para WAHA, se retornou 201 com dados da mensagem, √© sucesso
                        if response.status_code == 201 or result.get('success', False):
                            print(f"‚úÖ [WAHA DEBUG] Sucesso no envio!")
                            self.log_result(numero, 'sucesso', 'Mensagem de texto enviada')
                            return True
                        else:
                            error_msg = result.get('message', 'Erro desconhecido')
                            print(f"‚ùå [WAHA DEBUG] Falha na API: {error_msg}")
                            self.log_result(numero, 'erro', error_msg)
                            return False
                    except Exception as json_error:
                        print(f"‚ùå [WAHA DEBUG] Erro ao parsear JSON: {json_error}")
                        self.log_result(numero, 'erro', f'Erro JSON: {json_error}')
                        return False
                else:
                    print(f"‚ùå [WAHA DEBUG] HTTP Error: {response.status_code}")
                    self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                    return False
                    
        except Exception as e:
            print(f"üí• [WAHA DEBUG] Exce√ß√£o geral: {e}")
            self.logger.error(f"Erro WAHA para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_media_waha(self, numero: str, caption: str, caminho_midia: str, base_url: str, instance_id: str) -> bool:
        """Envia arquivo de m√≠dia via WAHA"""
        try:
            # Determinar tipo de m√≠dia
            mime_type, _ = mimetypes.guess_type(caminho_midia)
            
            if mime_type:
                if mime_type.startswith('image/'):
                    endpoint = "/api/sendImage"
                elif mime_type.startswith('video/'):
                    endpoint = "/api/sendVideo"
                elif mime_type.startswith('audio/'):
                    endpoint = "/api/sendVoice"
                else:
                    endpoint = "/api/sendFile"
            else:
                endpoint = "/api/sendFile"
            
            url = f"{base_url}{endpoint}"
            
            # Preparar arquivos para upload
            with open(caminho_midia, 'rb') as file:
                files = {'file': file}
                data = {
                    'chatId': f"{numero}@c.us",
                    'caption': caption,
                    'session': instance_id
                }
                
                # Enviar sem Content-Type header para upload de arquivo
                headers = self.session.headers.copy()
                if 'Content-Type' in headers:
                    del headers['Content-Type']
                
                response = requests.post(url, files=files, data=data, headers=headers, timeout=60)
                
                if response.status_code in [200, 201]:  # 200 OK ou 201 Created
                    result = response.json()
                    # Para WAHA, se retornou 201 com dados da mensagem, √© sucesso
                    if response.status_code == 201 or result.get('success', False):
                        self.log_result(numero, 'sucesso', f'M√≠dia enviada: {os.path.basename(caminho_midia)}')
                        return True
                    else:
                        error_msg = result.get('message', 'Erro ao enviar m√≠dia')
                        self.log_result(numero, 'erro', error_msg)
                        return False
                else:
                    self.log_result(numero, 'erro', f'HTTP {response.status_code} ao enviar m√≠dia')
                    return False
                    
        except Exception as e:
            self.logger.error(f"Erro ao enviar m√≠dia WAHA para {numero}: {e}")
            self.log_result(numero, 'erro', f'Erro m√≠dia: {str(e)}')
            return False
    
    def _send_via_chat_api(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """Envia mensagem via Chat-API"""
        base_url = self.config.get('base_url', '')
        instance_id = self.config.get('instance_id', '')
        
        numero_limpo = numero.replace('+', '').replace('-', '').replace(' ', '')
        
        try:
            if caminho_midia and os.path.exists(caminho_midia):
                # Enviar arquivo
                url = f"{base_url}/sendFile"
                
                with open(caminho_midia, 'rb') as file:
                    files = {'file': file}
                    data = {
                        'phone': numero_limpo,
                        'body': mensagem
                    }
                    
                    response = self.session.post(url, files=files, data=data)
            else:
                # Enviar texto
                url = f"{base_url}/sendMessage"
                payload = {
                    "phone": numero_limpo,
                    "body": mensagem
                }
                
                response = self.session.post(url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('sent', False):
                    self.log_result(numero, 'sucesso', 'Mensagem enviada via Chat-API')
                    return True
                else:
                    error_msg = result.get('message', 'Erro Chat-API')
                    self.log_result(numero, 'erro', error_msg)
                    return False
            else:
                self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                return False
                
        except Exception as e:
            self.logger.error(f"Erro Chat-API para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_via_z_api(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """Envia mensagem via Z-API"""
        base_url = self.config.get('base_url', '')
        instance_id = self.config.get('instance_id', '')
        token = self.config.get('token', '')
        
        numero_limpo = numero.replace('+', '').replace('-', '').replace(' ', '')
        
        try:
            if caminho_midia and os.path.exists(caminho_midia):
                # Para Z-API, geralmente precisa fazer upload primeiro
                url = f"{base_url}/instances/{instance_id}/token/{token}/send-document"
                
                with open(caminho_midia, 'rb') as file:
                    files = {'file': file}
                    data = {
                        'phone': numero_limpo,
                        'message': mensagem
                    }
                    
                    response = self.session.post(url, files=files, data=data)
            else:
                # Enviar texto
                url = f"{base_url}/instances/{instance_id}/token/{token}/send-text"
                payload = {
                    "phone": numero_limpo,
                    "message": mensagem
                }
                
                response = self.session.post(url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('success', False):
                    self.log_result(numero, 'sucesso', 'Mensagem enviada via Z-API')
                    return True
                else:
                    error_msg = result.get('error', 'Erro Z-API')
                    self.log_result(numero, 'erro', error_msg)
                    return False
            else:
                self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                return False
                
        except Exception as e:
            self.logger.error(f"Erro Z-API para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_via_ultramsg(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """Envia mensagem via UltraMsg"""
        base_url = self.config.get('base_url', '')
        token = self.config.get('token', '')
        
        numero_limpo = numero.replace('+', '').replace('-', '').replace(' ', '')
        
        try:
            if caminho_midia and os.path.exists(caminho_midia):
                # Enviar documento
                url = f"{base_url}/messages/document"
                
                with open(caminho_midia, 'rb') as file:
                    files = {'document': file}
                    data = {
                        'token': token,
                        'to': numero_limpo,
                        'caption': mensagem
                    }
                    
                    response = self.session.post(url, files=files, data=data)
            else:
                # Enviar texto
                url = f"{base_url}/messages/chat"
                payload = {
                    "token": token,
                    "to": numero_limpo,
                    "body": mensagem
                }
                
                response = self.session.post(url, json=payload)
            
            if response.status_code == 200:
                result = response.json()
                if result.get('sent', False):
                    self.log_result(numero, 'sucesso', 'Mensagem enviada via UltraMsg')
                    return True
                else:
                    error_msg = result.get('error', 'Erro UltraMsg')
                    self.log_result(numero, 'erro', error_msg)
                    return False
            else:
                self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                return False
                
        except Exception as e:
            self.logger.error(f"Erro UltraMsg para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_generic(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """Envio gen√©rico para APIs n√£o espec√≠ficas"""
        base_url = self.config.get('base_url', '')
        
        numero_limpo = numero.replace('+', '').replace('-', '').replace(' ', '')
        
        try:
            if caminho_midia and os.path.exists(caminho_midia):
                # Tentar envio de arquivo gen√©rico
                endpoint = self.config.get('media_endpoint', '/send-media')
                url = f"{base_url}{endpoint}"
                
                with open(caminho_midia, 'rb') as file:
                    files = {'file': file}
                    data = {
                        'phone': numero_limpo,
                        'message': mensagem
                    }
                    
                    response = self.session.post(url, files=files, data=data)
            else:
                # Envio de texto gen√©rico
                endpoint = self.config.get('text_endpoint', '/send-message')
                url = f"{base_url}{endpoint}"
                payload = {
                    "phone": numero_limpo,
                    "message": mensagem
                }
                
                response = self.session.post(url, json=payload)
            
            if response.status_code == 200:
                self.log_result(numero, 'sucesso', 'Mensagem enviada (gen√©rico)')
                return True
            else:
                self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                return False
                
        except Exception as e:
            self.logger.error(f"Erro gen√©rico para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_via_evolution_api(self, numero: str, mensagem: str, caminho_midia: str = '') -> bool:
        """Envia mensagem via Evolution API"""
        base_url = self.config.get('base_url', '')
        instance_id = self.config.get('instance_id', '')
        
        print(f"üîç [EVOLUTION DEBUG] Iniciando envio para {numero}")
        print(f"üîç [EVOLUTION DEBUG] Base URL: {base_url}")
        print(f"üîç [EVOLUTION DEBUG] Instance ID: {instance_id}")
        print(f"üîç [EVOLUTION DEBUG] Mensagem: {mensagem[:50]}...")
        print(f"üîç [EVOLUTION DEBUG] M√≠dia: {caminho_midia if caminho_midia else 'Nenhuma'}")
        
        # Limpar n√∫mero (remover caracteres especiais)
        numero_limpo = numero.replace('+', '').replace('-', '').replace(' ', '')
        print(f"üîç [EVOLUTION DEBUG] N√∫mero limpo: {numero_limpo}")
        
        try:
            if caminho_midia and os.path.exists(caminho_midia):
                print(f"üîç [EVOLUTION DEBUG] Enviando m√≠dia: {caminho_midia}")
                # Enviar m√≠dia com caption
                return self._send_media_evolution_api(numero_limpo, mensagem, caminho_midia, base_url, instance_id)
            else:
                print(f"üîç [EVOLUTION DEBUG] Enviando texto simples")
                # Enviar apenas texto
                url = f"{base_url}/message/sendText/{instance_id}"
                print(f"üîç [EVOLUTION DEBUG] URL completa: {url}")
                
                payload = {
                    "number": numero_limpo,
                    "text": mensagem
                }
                print(f"üîç [EVOLUTION DEBUG] Payload: {payload}")
                
                print(f"üîç [EVOLUTION DEBUG] Fazendo requisi√ß√£o POST...")
                response = self.session.post(url, json=payload)
                print(f"üîç [EVOLUTION DEBUG] Status Code: {response.status_code}")
                print(f"üîç [EVOLUTION DEBUG] Response Headers: {dict(response.headers)}")
                
                try:
                    response_text = response.text
                    print(f"üîç [EVOLUTION DEBUG] Response Text: {response_text}")
                except:
                    print(f"üîç [EVOLUTION DEBUG] Erro ao ler response text")
                
                if response.status_code in [200, 201]:  # 200 OK ou 201 Created
                    try:
                        result = response.json()
                        print(f"üîç [EVOLUTION DEBUG] Response JSON: {result}")
                        # Para Evolution API, verificar se h√° key no resultado
                        if result.get('key') or result.get('messageId'):
                            print(f"‚úÖ [EVOLUTION DEBUG] Sucesso no envio!")
                            self.log_result(numero, 'sucesso', 'Mensagem de texto enviada')
                            return True
                        else:
                            error_msg = result.get('message', 'Erro desconhecido')
                            print(f"‚ùå [EVOLUTION DEBUG] Falha na API: {error_msg}")
                            self.log_result(numero, 'erro', error_msg)
                            return False
                    except Exception as json_error:
                        print(f"‚ùå [EVOLUTION DEBUG] Erro ao parsear JSON: {json_error}")
                        self.log_result(numero, 'erro', f'Erro JSON: {json_error}')
                        return False
                else:
                    print(f"‚ùå [EVOLUTION DEBUG] HTTP Error: {response.status_code}")
                    self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                    return False
                    
        except Exception as e:
            print(f"üí• [EVOLUTION DEBUG] Exce√ß√£o geral: {e}")
            self.logger.error(f"Erro Evolution API para {numero}: {e}")
            self.log_result(numero, 'erro', str(e))
            return False
    
    def _send_media_evolution_api(self, numero: str, caption: str, caminho_midia: str, base_url: str, instance_id: str) -> bool:
        """Envia arquivo de m√≠dia via Evolution API com retry logic avan√ßado"""
        max_tentativas = 3
        timeouts = [30, 60, 120]  # Timeouts progressivos
        
        # Valida√ß√µes iniciais
        if not os.path.exists(caminho_midia):
            self.log_result(numero, 'erro', f'Arquivo n√£o encontrado: {caminho_midia}')
            return False
        
        # Verificar tamanho do arquivo
        tamanho_mb = os.path.getsize(caminho_midia) / (1024 * 1024)
        if tamanho_mb > 64:  # Limite amplo para Evolution API
            self.log_result(numero, 'erro', f'Arquivo muito grande: {tamanho_mb:.1f}MB (m√°ximo 64MB)')
            return False
        
        for tentativa in range(max_tentativas):
            try:
                print(f"üîÑ [M√çDIA] Tentativa {tentativa + 1}/{max_tentativas} para {os.path.basename(caminho_midia)}")
                
                # Determinar tipo de m√≠dia e endpoint
                mime_type, _ = mimetypes.guess_type(caminho_midia)
                endpoint, media_type = self._get_evolution_endpoint_and_type(mime_type)
                
                url = f"{base_url}{endpoint.format(instance_id=instance_id)}"
                print(f"üîó [M√çDIA] URL: {url}")
                print(f"üìé [M√çDIA] Tipo: {media_type} | Tamanho: {tamanho_mb:.1f}MB")
                
                # Preparar dados para upload
                with open(caminho_midia, 'rb') as file:
                    files = {'attachment': file}
                    data = {
                        'number': numero,
                        'caption': caption,
                        'mediatype': media_type
                    }
                    
                    # Headers otimizados para upload
                    headers = self.session.headers.copy()
                    if 'Content-Type' in headers:
                        del headers['Content-Type']
                    
                    timeout = timeouts[min(tentativa, len(timeouts) - 1)]
                    print(f"‚è±Ô∏è  [M√çDIA] Timeout: {timeout}s")
                    
                    response = requests.post(url, files=files, data=data, 
                                           headers=headers, timeout=timeout)
                    
                    print(f"üì° [M√çDIA] Status: {response.status_code}")
                    
                    # Verificar resposta
                    if response.status_code in [200, 201]:
                        try:
                            result = response.json()
                            print(f"üìã [M√çDIA] Resposta: {result}")
                            
                            # Verificar sucesso da Evolution API
                            if result.get('key') or result.get('messageId') or result.get('id'):
                                print(f"‚úÖ [M√çDIA] M√≠dia enviada com sucesso!")
                                self.log_result(numero, 'sucesso', 
                                              f'M√≠dia enviada: {os.path.basename(caminho_midia)} ({tamanho_mb:.1f}MB)')
                                return True
                            else:
                                error_msg = result.get('message', 'Resposta sem ID v√°lido')
                                print(f"‚ö†Ô∏è  [M√çDIA] Falha na API: {error_msg}")
                                
                                if tentativa < max_tentativas - 1:
                                    print(f"üîÑ [M√çDIA] Tentando novamente em 3s...")
                                    import time
                                    time.sleep(3)
                                    continue
                                else:
                                    self.log_result(numero, 'erro', error_msg)
                                    return False
                                    
                        except json.JSONDecodeError as json_error:
                            print(f"‚ö†Ô∏è  [M√çDIA] Erro JSON: {json_error}")
                            if tentativa < max_tentativas - 1:
                                print(f"üîÑ [M√çDIA] Tentando novamente...")
                                import time
                                time.sleep(2)
                                continue
                            else:
                                self.log_result(numero, 'erro', f'Erro JSON: {json_error}')
                                return False
                    
                    elif response.status_code == 401:
                        print(f"üîê [M√çDIA] Erro de autentica√ß√£o (401)")
                        self.log_result(numero, 'erro', 'Token de API inv√°lido')
                        return False  # N√£o tentar novamente para erro de auth
                    
                    elif response.status_code == 413:
                        print(f"üìè [M√çDIA] Arquivo muito grande (413)")
                        self.log_result(numero, 'erro', 'Arquivo excede limite do servidor')
                        return False  # N√£o tentar novamente para arquivo grande
                    
                    elif response.status_code in [500, 502, 503, 504]:
                        print(f"üîß [M√çDIA] Erro do servidor ({response.status_code})")
                        if tentativa < max_tentativas - 1:
                            wait_time = (tentativa + 1) * 5  # 5s, 10s, 15s
                            print(f"‚è≥ [M√çDIA] Aguardando {wait_time}s antes de tentar novamente...")
                            import time
                            time.sleep(wait_time)
                            continue
                        else:
                            self.log_result(numero, 'erro', f'Erro servidor: HTTP {response.status_code}')
                            return False
                    
                    else:
                        print(f"‚ùå [M√çDIA] HTTP {response.status_code}")
                        if tentativa < max_tentativas - 1:
                            print(f"üîÑ [M√çDIA] Tentando novamente...")
                            import time
                            time.sleep(2)
                            continue
                        else:
                            self.log_result(numero, 'erro', f'HTTP {response.status_code}')
                            return False
                            
            except requests.exceptions.Timeout:
                print(f"‚è∞ [M√çDIA] Timeout na tentativa {tentativa + 1}")
                if tentativa < max_tentativas - 1:
                    print(f"üîÑ [M√çDIA] Aumentando timeout e tentando novamente...")
                    continue
                else:
                    self.log_result(numero, 'erro', f'Timeout ap√≥s {max_tentativas} tentativas')
                    return False
                    
            except requests.exceptions.ConnectionError:
                print(f"üîå [M√çDIA] Erro de conex√£o na tentativa {tentativa + 1}")
                if tentativa < max_tentativas - 1:
                    print(f"üîÑ [M√çDIA] Tentando reconectar...")
                    import time
                    time.sleep(5)
                    continue
                else:
                    self.log_result(numero, 'erro', 'Erro de conex√£o persistente')
                    return False
                    
            except Exception as e:
                print(f"üí• [M√çDIA] Erro inesperado: {e}")
                if tentativa < max_tentativas - 1:
                    print(f"üîÑ [M√çDIA] Tentando novamente...")
                    import time
                    time.sleep(2)
                    continue
                else:
                    self.logger.error(f"Erro ao enviar m√≠dia Evolution API para {numero}: {e}")
                    self.log_result(numero, 'erro', f'Erro: {str(e)}')
                    return False
        
        return False
    
    def _get_evolution_endpoint_and_type(self, mime_type: str) -> tuple:
        """Determina endpoint e tipo de m√≠dia para Evolution API"""
        if not mime_type:
            return "/message/sendMedia/{instance_id}", "document"
        
        if mime_type.startswith('image/'):
            return "/message/sendMedia/{instance_id}", "image"
        elif mime_type.startswith('video/'):
            return "/message/sendMedia/{instance_id}", "video"
        elif mime_type.startswith('audio/'):
            return "/message/sendWhatsAppAudio/{instance_id}", "audio"
        else:
            return "/message/sendMedia/{instance_id}", "document"
    
    def get_log_filename(self) -> str:
        """Retorna o nome do arquivo de log"""
        return self.log_filename