#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Instalador Autom√°tico do Sistema de Solu√ß√£o de M√≠dia WAHA

Este script configura automaticamente todo o sistema de diagn√≥stico,
teste e monitoramento de m√≠dia para o WAHA.

Uso:
    python instalar_sistema_midia.py
    python instalar_sistema_midia.py --config-apenas
    python instalar_sistema_midia.py --verificar

Autor: Sistema de Automa√ß√£o WAHA
Data: Janeiro 2024
"""

import os
import sys
import json
import subprocess
import argparse
from pathlib import Path
from datetime import datetime

class InstaladorSistemaMidia:
    def __init__(self):
        self.base_dir = Path.cwd()
        self.config_file = self.base_dir / "config.json"
        self.scripts_necessarios = [
            "solucionar_midia_waha.py",
            "diagnostico_midia_waha.py",
            "teste_formatos_midia.py",
            "monitor_waha_realtime.py"
        ]
        self.arquivos_documentacao = [
            "GUIA_SOLUCAO_MIDIA_WAHA.md",
            "README_SOLUCAO_MIDIA.md"
        ]
        
    def print_banner(self):
        """Exibe banner de boas-vindas"""
        print("\n" + "="*70)
        print("üîß INSTALADOR DO SISTEMA DE SOLU√á√ÉO DE M√çDIA WAHA")
        print("="*70)
        print("üìã Configura√ß√£o autom√°tica de diagn√≥stico e monitoramento")
        print("üéØ Resolu√ß√£o autom√°tica de problemas de envio de m√≠dia")
        print("üìä Monitoramento em tempo real do WAHA")
        print("="*70 + "\n")
        
    def verificar_python(self):
        """Verifica vers√£o do Python"""
        print("üêç Verificando vers√£o do Python...")
        
        if sys.version_info < (3, 7):
            print("‚ùå Python 3.7+ √© necess√°rio")
            print(f"   Vers√£o atual: {sys.version}")
            return False
            
        print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} detectado")
        return True
        
    def verificar_dependencias(self):
        """Verifica e instala depend√™ncias"""
        print("\nüì¶ Verificando depend√™ncias...")
        
        dependencias = ['requests']
        faltando = []
        
        for dep in dependencias:
            try:
                __import__(dep)
                print(f"‚úÖ {dep} - OK")
            except ImportError:
                print(f"‚ùå {dep} - FALTANDO")
                faltando.append(dep)
                
        if faltando:
            print(f"\nüì• Instalando depend√™ncias faltando: {', '.join(faltando)}")
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install'] + faltando)
                print("‚úÖ Depend√™ncias instaladas com sucesso")
                return True
            except subprocess.CalledProcessError:
                print("‚ùå Erro ao instalar depend√™ncias")
                print("   Execute manualmente: pip install requests")
                return False
        
        print("‚úÖ Todas as depend√™ncias est√£o instaladas")
        return True
        
    def verificar_scripts(self):
        """Verifica se todos os scripts est√£o presentes"""
        print("\nüìÑ Verificando scripts do sistema...")
        
        scripts_faltando = []
        
        for script in self.scripts_necessarios:
            script_path = self.base_dir / script
            if script_path.exists():
                print(f"‚úÖ {script} - OK")
            else:
                print(f"‚ùå {script} - FALTANDO")
                scripts_faltando.append(script)
                
        if scripts_faltando:
            print(f"\n‚ö†Ô∏è  Scripts faltando: {', '.join(scripts_faltando)}")
            print("   Certifique-se de que todos os arquivos foram criados")
            return False
            
        print("‚úÖ Todos os scripts est√£o presentes")
        return True
        
    def criar_configuracao(self):
        """Cria arquivo de configura√ß√£o inicial"""
        print("\n‚öôÔ∏è  Criando configura√ß√£o inicial...")
        
        if self.config_file.exists():
            print("üìã Arquivo config.json j√° existe")
            
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                print("‚úÖ Configura√ß√£o carregada com sucesso")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao ler configura√ß√£o existente: {e}")
                print("   Criando nova configura√ß√£o...")
        
        # Solicitar configura√ß√µes do usu√°rio
        print("\nüìù Configure seu WAHA:")
        
        base_url = input("üåê URL do WAHA [http://localhost:3000]: ").strip()
        if not base_url:
            base_url = "http://localhost:3000"
            
        token = input("üîë Token de API do WAHA: ").strip()
        if not token:
            print("‚ö†Ô∏è  Token n√£o fornecido - voc√™ pode configurar depois")
            token = "seu-token-aqui"
            
        instance_id = input("üì± ID da Inst√¢ncia [default]: ").strip()
        if not instance_id:
            instance_id = "default"
            
        config = {
            "base_url": base_url,
            "token": token,
            "instance_id": instance_id,
            "provider": "waha",
            "timeout": 60,
            "max_retries": 3,
            "created_at": datetime.now().isoformat(),
            "version": "1.0"
        }
        
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Configura√ß√£o salva em {self.config_file}")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao salvar configura√ß√£o: {e}")
            return False
            
    def criar_diretorio_logs(self):
        """Cria diret√≥rio para logs"""
        print("\nüìÅ Criando diret√≥rio de logs...")
        
        logs_dir = self.base_dir / "logs"
        
        try:
            logs_dir.mkdir(exist_ok=True)
            print(f"‚úÖ Diret√≥rio de logs: {logs_dir}")
            
            # Criar arquivo .gitignore para logs
            gitignore_path = logs_dir / ".gitignore"
            with open(gitignore_path, 'w') as f:
                f.write("# Logs do sistema\n*.log\n*.json\n")
                
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rio de logs: {e}")
            return False
            
    def criar_diretorio_teste(self):
        """Cria diret√≥rio para arquivos de teste"""
        print("\nüß™ Criando diret√≥rio de teste...")
        
        teste_dir = self.base_dir / "arquivos_teste"
        
        try:
            teste_dir.mkdir(exist_ok=True)
            print(f"‚úÖ Diret√≥rio de teste: {teste_dir}")
            
            # Criar arquivo README no diret√≥rio de teste
            readme_path = teste_dir / "README.md"
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write("# Arquivos de Teste\n\n")
                f.write("Este diret√≥rio cont√©m arquivos para testar o envio de m√≠dia.\n\n")
                f.write("## Formatos Suportados\n\n")
                f.write("- **Imagens:** JPG, PNG, WebP (at√© 16MB)\n")
                f.write("- **V√≠deos:** MP4, 3GP (at√© 16MB)\n")
                f.write("- **√Åudios:** AAC, MP3, AMR, OGG (at√© 16MB)\n")
                f.write("- **Documentos:** PDF, DOC, XLS, TXT, ZIP (at√© 100MB)\n")
                
            return True
        except Exception as e:
            print(f"‚ùå Erro ao criar diret√≥rio de teste: {e}")
            return False
            
    def testar_instalacao(self):
        """Testa se a instala√ß√£o foi bem-sucedida"""
        print("\nüß™ Testando instala√ß√£o...")
        
        # Testar importa√ß√£o dos m√≥dulos
        try:
            sys.path.insert(0, str(self.base_dir))
            
            # Testar script principal
            print("üìã Testando script principal...")
            result = subprocess.run(
                [sys.executable, "solucionar_midia_waha.py", "--help"],
                capture_output=True,
                text=True,
                cwd=self.base_dir
            )
            
            if result.returncode == 0:
                print("‚úÖ Script principal - OK")
            else:
                print(f"‚ùå Script principal - ERRO: {result.stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro no teste: {e}")
            return False
            
        print("‚úÖ Instala√ß√£o testada com sucesso")
        return True
        
    def mostrar_proximos_passos(self):
        """Mostra os pr√≥ximos passos ap√≥s instala√ß√£o"""
        print("\n" + "="*70)
        print("üéâ INSTALA√á√ÉO CONCLU√çDA COM SUCESSO!")
        print("="*70)
        
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("\n1. üîß Configure seu token WAHA (se ainda n√£o fez):")
        print("   python solucionar_midia_waha.py --config")
        
        print("\n2. ü©∫ Execute o diagn√≥stico inicial:")
        print("   python solucionar_midia_waha.py --diagnostico")
        
        print("\n3. üéØ Use o menu interativo:")
        print("   python solucionar_midia_waha.py")
        
        print("\n4. üìä Inicie o monitoramento:")
        print("   python monitor_waha_realtime.py")
        
        print("\n5. üß™ Teste um arquivo:")
        print("   python teste_formatos_midia.py arquivo.jpg +5511999999999")
        
        print("\nüìö DOCUMENTA√á√ÉO:")
        print("   üìñ README_SOLUCAO_MIDIA.md - Guia completo")
        print("   üìñ GUIA_SOLUCAO_MIDIA_WAHA.md - Solu√ß√µes detalhadas")
        
        print("\nüÜò SUPORTE:")
        print("   üîç python solucionar_midia_waha.py --help")
        print("   ü©∫ python diagnostico_midia_waha.py")
        
        print("\n" + "="*70)
        print("‚ú® Sistema pronto para resolver problemas de m√≠dia!")
        print("="*70 + "\n")
        
    def verificar_sistema_completo(self):
        """Verifica se o sistema est√° completamente instalado"""
        print("\nüîç Verificando sistema completo...")
        
        verificacoes = {
            "Python 3.7+": self.verificar_python(),
            "Depend√™ncias": True,  # Ser√° verificado separadamente
            "Scripts": self.verificar_scripts(),
            "Configura√ß√£o": self.config_file.exists(),
            "Diret√≥rio logs": (self.base_dir / "logs").exists(),
            "Diret√≥rio teste": (self.base_dir / "arquivos_teste").exists()
        }
        
        # Verificar depend√™ncias separadamente
        try:
            import requests
            verificacoes["Depend√™ncias"] = True
        except ImportError:
            verificacoes["Depend√™ncias"] = False
            
        print("\nüìä RELAT√ìRIO DE VERIFICA√á√ÉO:")
        print("-" * 40)
        
        tudo_ok = True
        for item, status in verificacoes.items():
            status_icon = "‚úÖ" if status else "‚ùå"
            print(f"{status_icon} {item}")
            if not status:
                tudo_ok = False
                
        print("-" * 40)
        
        if tudo_ok:
            print("üéâ Sistema completamente instalado e funcional!")
        else:
            print("‚ö†Ô∏è  Alguns componentes precisam de aten√ß√£o")
            
        return tudo_ok
        
    def instalar_completo(self):
        """Executa instala√ß√£o completa"""
        self.print_banner()
        
        etapas = [
            ("Verificar Python", self.verificar_python),
            ("Verificar depend√™ncias", self.verificar_dependencias),
            ("Verificar scripts", self.verificar_scripts),
            ("Criar configura√ß√£o", self.criar_configuracao),
            ("Criar diret√≥rio de logs", self.criar_diretorio_logs),
            ("Criar diret√≥rio de teste", self.criar_diretorio_teste),
            ("Testar instala√ß√£o", self.testar_instalacao)
        ]
        
        print(f"üöÄ Iniciando instala√ß√£o em {self.base_dir}")
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        for nome, funcao in etapas:
            print(f"\n‚è≥ {nome}...")
            if not funcao():
                print(f"\n‚ùå FALHA na etapa: {nome}")
                print("üõë Instala√ß√£o interrompida")
                return False
                
        self.mostrar_proximos_passos()
        return True

def main():
    parser = argparse.ArgumentParser(
        description="Instalador do Sistema de Solu√ß√£o de M√≠dia WAHA",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos:
  python instalar_sistema_midia.py              # Instala√ß√£o completa
  python instalar_sistema_midia.py --verificar  # Apenas verificar sistema
  python instalar_sistema_midia.py --config     # Apenas configurar
        """
    )
    
    parser.add_argument(
        '--verificar',
        action='store_true',
        help='Apenas verificar se o sistema est√° instalado'
    )
    
    parser.add_argument(
        '--config',
        action='store_true',
        help='Apenas criar/atualizar configura√ß√£o'
    )
    
    args = parser.parse_args()
    
    instalador = InstaladorSistemaMidia()
    
    if args.verificar:
        instalador.print_banner()
        instalador.verificar_sistema_completo()
    elif args.config:
        instalador.print_banner()
        instalador.criar_configuracao()
    else:
        # Instala√ß√£o completa
        sucesso = instalador.instalar_completo()
        sys.exit(0 if sucesso else 1)

if __name__ == "__main__":
    main()